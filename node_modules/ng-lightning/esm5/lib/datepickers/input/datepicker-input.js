import { __assign, __decorate, __metadata, __param, __read, __spread } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ElementRef, Renderer2, TemplateRef, forwardRef, ChangeDetectorRef, Output, EventEmitter, ViewChild, OnInit, Inject, OnChanges, SimpleChanges, OnDestroy, Optional, NgZone, LOCALE_ID } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { CdkConnectedOverlay } from '@angular/cdk/overlay';
import { FocusTrapFactory, FocusTrap } from '@angular/cdk/a11y';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { BehaviorSubject } from 'rxjs';
import { take } from 'rxjs/operators';
import { uniqueId } from '../../util/util';
import { InputBoolean } from '../../util/convert';
import { HostService } from '../../common/host/host.service';
import { NglDateAdapter } from '../adapters/date-fns-adapter';
import { NGL_DATEPICKER_CONFIG, NglDatepickerConfig } from '../config';
import { DEFAULT_DROPDOWN_POSITIONS } from '../../util/overlay-position';
import { parseDate, isDisabled } from '../util';
var NGL_DATEPICKER_INPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NglDatepickerInput; }),
    multi: true
};
var NGL_DATEPICKER_INPUT_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return NglDatepickerInput; }),
    multi: true
};
var NglDatepickerInput = /** @class */ (function () {
    function NglDatepickerInput(defaultConfig, locale, element, renderer, cd, hostService, ngZone, focusTrapFactory, adapter) {
        this.element = element;
        this.renderer = renderer;
        this.cd = cd;
        this.hostService = hostService;
        this.ngZone = ngZone;
        this.focusTrapFactory = focusTrapFactory;
        this.adapter = adapter;
        /**
         * Emits when selected date changes.
         */
        this.valueChange = new EventEmitter();
        /**
         * Text for button to open calendar.
         */
        this.selectDateLabel = 'Select a date';
        this.dateDisabled = null;
        this.uid = uniqueId('datepicker-input');
        this._open = new BehaviorSubject(false);
        this._value = null;
        this.onChange = null;
        this.onTouched = function () { };
        this.validatorChange = function () { };
        this.renderer.addClass(this.element.nativeElement, 'slds-form-element');
        this.renderer.addClass(this.element.nativeElement, 'slds-dropdown-trigger');
        this.renderer.addClass(this.element.nativeElement, 'slds-dropdown-trigger_click');
        this.config = __assign(__assign({}, new NglDatepickerConfig(locale)), defaultConfig);
        this.format = this.config.format;
        this.delimiter = this.config.delimiter;
        this.setPositions(this.config.dropdownAlign);
        this.monthNames = this.config.monthNames;
        this.dayNamesShort = this.config.dayNamesShort;
        this.dayNamesLong = this.config.dayNamesLong;
        this.firstDayOfWeek = this.config.firstDayOfWeek;
        this.showToday = this.config.showToday;
        this.relativeYearFrom = this.config.relativeYearFrom;
        this.relativeYearTo = this.config.relativeYearTo;
        this.openOnInputClick = this.config.openOnInputClick;
        this.todayLabel = this.config.todayLabel;
        this.previousMonthLabel = this.config.previousMonthLabel;
        this.nextMonthLabel = this.config.nextMonthLabel;
        this.patternPlaceholder = this.config.patternPlaceholder;
    }
    Object.defineProperty(NglDatepickerInput.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * The date value.
         */
        set: function (value) {
            if (value === this._value) {
                return;
            }
            this._value = value;
            if (this.value instanceof Date) {
                this.date = this.value;
                this.formatInputValue();
            }
            else {
                this.updateInputValue(value || '');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglDatepickerInput.prototype, "open", {
        get: function () {
            return this._open.value;
        },
        set: function (open) {
            this._open.next(open);
        },
        enumerable: true,
        configurable: true
    });
    NglDatepickerInput.prototype.validate = function (c) {
        var value = c.value;
        if (!value) {
            return null;
        }
        if (!(this.value instanceof Date)) {
            return { 'nglDatepickerInput': { invalid: c.value } };
        }
        var date = parseDate(value);
        if (isDisabled(date, this.dateDisabled, parseDate(this.min), parseDate(this.max))) {
            return { 'nglDatepickerInput': { disabled: c.value } };
        }
        return null;
    };
    NglDatepickerInput.prototype.writeValue = function (value) {
        this.value = value;
        this.cd.markForCheck();
    };
    NglDatepickerInput.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    NglDatepickerInput.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    NglDatepickerInput.prototype.registerOnValidatorChange = function (fn) { this.validatorChange = fn; };
    NglDatepickerInput.prototype.setDisabledState = function (disabled) { this.disabled = disabled; };
    NglDatepickerInput.prototype.onBlur = function () {
        if (this.value instanceof Date) {
            this.updateInputValue();
        }
        this.onTouched();
    };
    NglDatepickerInput.prototype.ngOnInit = function () {
        var _this = this;
        this._open.subscribe(function () {
            _this.setHostClass();
            _this.cd.markForCheck();
        });
    };
    NglDatepickerInput.prototype.ngOnChanges = function (changes) {
        if (changes.format || changes.delimiter) {
            this.setPattern();
            if (this.value instanceof Date) {
                this.updateInputValue();
            }
        }
        if (changes.dropdownAlign) {
            this.setPositions(this.dropdownAlign);
        }
        if (changes.min || changes.max) {
            this.validatorChange();
        }
        if ((changes.patternPlaceholder || changes.format || changes.delimiter) && this.patternPlaceholder) {
            this.inputEl.setPlaceholder(this.getPattern().toLocaleUpperCase());
        }
        if (changes.disabled) {
            this.inputEl.setDisabled(this.disabled);
        }
    };
    NglDatepickerInput.prototype.ngOnDestroy = function () {
        this.closeCalendar(false);
    };
    NglDatepickerInput.prototype.onKeyboardInput = function (evt) {
        var keyCode = evt.keyCode;
        if (!this.open && (keyCode === DOWN_ARROW || keyCode === UP_ARROW)) {
            this.openCalendar();
        }
    };
    NglDatepickerInput.prototype.onInputChange = function () {
        var value = this.inputEl.element.nativeElement.value;
        var date = this.dateParse(value);
        this.emitSelection(date || value);
    };
    NglDatepickerInput.prototype.openCalendar = function () {
        this.open = true;
    };
    NglDatepickerInput.prototype.onAttach = function () {
        this.focusTrap = this.focusTrapFactory.create(this.cdkOverlay.overlayRef.overlayElement);
    };
    NglDatepickerInput.prototype.onDetach = function () {
        if (this.open) {
            this.closeCalendar();
        }
    };
    NglDatepickerInput.prototype.closeCalendar = function (focusInput) {
        if (focusInput === void 0) { focusInput = true; }
        this.open = false;
        if (this.focusTrap) {
            this.focusTrap.destroy();
            this.focusTrap = null;
        }
        if (focusInput) {
            this.inputEl.element.nativeElement.focus();
        }
    };
    NglDatepickerInput.prototype.onTriggerClick = function (origin) {
        if (origin === 'input' && !this.openOnInputClick) {
            return;
        }
        if (!this.open) {
            this.openCalendar();
        }
        else {
            this.closeCalendar(false);
        }
    };
    NglDatepickerInput.prototype.pickerSelection = function (date) {
        this.emitSelection(date);
        this.closeCalendar();
    };
    NglDatepickerInput.prototype.updateDatepickerSize = function (width, height) {
        var _this = this;
        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {
            var overlayRef = _this.cdkOverlay.overlayRef;
            overlayRef.updateSize({
                minWidth: width,
                minHeight: height + 4,
            });
            overlayRef.updatePosition();
        });
    };
    NglDatepickerInput.prototype.setPositions = function (align) {
        this.overlayPositions = __spread(DEFAULT_DROPDOWN_POSITIONS[align]);
    };
    NglDatepickerInput.prototype.formatInputValue = function () {
        var inputValue = this.inputEl.element.nativeElement.value;
        if (!inputValue) {
            this.updateInputValue();
        }
        else {
            var date = this.value;
            var dateNow = this.dateParse(inputValue);
            if (!dateNow || dateNow.getFullYear() !== date.getFullYear() || dateNow.getMonth() !== date.getMonth() || dateNow.getDate() !== date.getDate()) {
                this.updateInputValue();
            }
        }
    };
    NglDatepickerInput.prototype.updateInputValue = function (value) {
        if (value === void 0) { value = this.dateFormat(this.value); }
        this.renderer.setProperty(this.inputEl.element.nativeElement, 'value', value || '');
    };
    NglDatepickerInput.prototype.dateParse = function (value) {
        return this.adapter.parse(value, this.getPattern());
    };
    NglDatepickerInput.prototype.dateFormat = function (date) {
        return this.adapter.format(date, this.getPattern());
    };
    NglDatepickerInput.prototype.getPattern = function () {
        if (!this.pattern) {
            this.setPattern();
        }
        return this.pattern;
    };
    NglDatepickerInput.prototype.setPattern = function () {
        this.pattern = this.adapter.pattern(this.format || this.config.format, this.delimiter || this.config.delimiter);
    };
    NglDatepickerInput.prototype.emitSelection = function (value) {
        this.valueChange.emit(value);
        if (this.onChange) {
            this.value = value;
            this.onChange(value);
        }
    };
    NglDatepickerInput.prototype.setHostClass = function () {
        var _a;
        this.hostService.updateClass(this.element, (_a = {},
            _a["slds-is-open"] = this.open,
            _a));
    };
    NglDatepickerInput.ctorParameters = function () { return [
        { type: NglDatepickerConfig, decorators: [{ type: Optional }, { type: Inject, args: [NGL_DATEPICKER_CONFIG,] }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: HostService },
        { type: NgZone },
        { type: FocusTrapFactory },
        { type: NglDateAdapter }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglDatepickerInput.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatepickerInput.prototype, "format", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglDatepickerInput.prototype, "delimiter", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglDatepickerInput.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatepickerInput.prototype, "dropdownAlign", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NglDatepickerInput.prototype, "value", null);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglDatepickerInput.prototype, "openOnInputClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglDatepickerInput.prototype, "valueChange", void 0);
    __decorate([
        ViewChild('cdkOverlay'),
        __metadata("design:type", CdkConnectedOverlay)
    ], NglDatepickerInput.prototype, "cdkOverlay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], NglDatepickerInput.prototype, "min", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], NglDatepickerInput.prototype, "max", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglDatepickerInput.prototype, "selectDateLabel", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglDatepickerInput.prototype, "patternPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglDatepickerInput.prototype, "monthNames", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglDatepickerInput.prototype, "dayNamesShort", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglDatepickerInput.prototype, "dayNamesLong", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepickerInput.prototype, "firstDayOfWeek", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglDatepickerInput.prototype, "showToday", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], NglDatepickerInput.prototype, "dateDisabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepickerInput.prototype, "relativeYearFrom", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepickerInput.prototype, "relativeYearTo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatepickerInput.prototype, "todayLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatepickerInput.prototype, "previousMonthLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatepickerInput.prototype, "nextMonthLabel", void 0);
    NglDatepickerInput = __decorate([
        Component({
            selector: 'ngl-datepicker-input',
            template: "\n<label class=\"slds-form-element__label\" *ngIf=\"label\" [attr.for]=\"uid\" [nglInternalOutlet]=\"label\"></label>\n<div class=\"slds-form-element__control slds-input-has-icon slds-input-has-icon_right\" #formEl cdkOverlayOrigin #overlayOrigin=\"cdkOverlayOrigin\">\n  <ng-content></ng-content>\n  <button class=\"slds-button slds-button_icon slds-input__icon slds-input__icon_right\" type=\"button\" [title]=\"selectDateLabel\" [disabled]=\"disabled\" (click)=\"onTriggerClick('button')\">\n    <svg class=\"slds-button__icon\" nglIconName=\"utility:event\"></svg><span class=\"slds-assistive-text\">{{ selectDateLabel }}</span>\n  </button>\n</div>\n<ng-template cdkConnectedOverlay #cdkOverlay=\"cdkConnectedOverlay\" [cdkConnectedOverlayPositions]=\"overlayPositions\" [cdkConnectedOverlayOrigin]=\"overlayOrigin\" [cdkConnectedOverlayOpen]=\"open\" (nglOverlayScrolledOutsideView)=\"closeCalendar(false)\" (attach)=\"onAttach()\" (detach)=\"onDetach()\">\n  <ngl-datepicker class=\"slds-dropdown\" [attr.aria-hidden]=\"!open\" [date]=\"date\" [monthNames]=\"monthNames\" [dayNamesShort]=\"dayNamesShort\" [dayNamesLong]=\"dayNamesLong\" [firstDayOfWeek]=\"firstDayOfWeek\" [showToday]=\"showToday\" [min]=\"min\" [max]=\"max\" [relativeYearFrom]=\"relativeYearFrom\" [relativeYearTo]=\"relativeYearTo\" [todayLabel]=\"todayLabel\" [previousMonthLabel]=\"previousMonthLabel\" [nextMonthLabel]=\"nextMonthLabel\" [dateDisabled]=\"dateDisabled\" (dateChange)=\"pickerSelection($event)\" (nglClickOutside)=\"closeCalendar(false)\" [nglClickOutsideIgnore]=\"formEl\"></ngl-datepicker>\n</ng-template>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [NGL_DATEPICKER_INPUT_VALUE_ACCESSOR, NGL_DATEPICKER_INPUT_VALIDATOR, HostService]
        }),
        __param(0, Optional()), __param(0, Inject(NGL_DATEPICKER_CONFIG)),
        __param(1, Inject(LOCALE_ID)),
        __metadata("design:paramtypes", [NglDatepickerConfig, String, ElementRef,
            Renderer2,
            ChangeDetectorRef,
            HostService,
            NgZone,
            FocusTrapFactory,
            NglDateAdapter])
    ], NglDatepickerInput);
    return NglDatepickerInput;
}());
export { NglDatepickerInput };
//# sourceMappingURL=data:application/json;base64,