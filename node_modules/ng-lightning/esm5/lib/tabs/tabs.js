import { __decorate, __metadata } from "tslib";
import { Component, Input, QueryList, ContentChildren, Output, EventEmitter, ElementRef, Renderer2, AfterContentInit } from '@angular/core';
import { isInt } from '../util/util';
import { NglTab } from './tab';
import { InputBoolean } from '../util/convert';
var NglTabs = /** @class */ (function () {
    function NglTabs(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.selectedChange = new EventEmitter();
        /**
         * Whether every tab's content is instantiated when visible, and destroyed when hidden.
         */
        this.lazy = true;
        this.renderer.addClass(this.element.nativeElement, "slds-tabs_" + this.variant);
    }
    Object.defineProperty(NglTabs.prototype, "variant", {
        get: function () {
            return this._variant || 'default';
        },
        set: function (variant) {
            var el = this.element.nativeElement;
            this.renderer.removeClass(el, "slds-tabs_" + this.variant);
            this._variant = variant;
            this.renderer.addClass(el, "slds-tabs_" + this.variant);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglTabs.prototype, "setSelected", {
        set: function (selected) {
            if (selected === this.selected) {
                return;
            }
            this.selected = selected;
            if (!this.tabs) {
                return;
            } // Wait for content to initialize
            this.activate();
        },
        enumerable: true,
        configurable: true
    });
    NglTabs.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Initial selection after all tabs are created
        this.activate();
        if (!this.activeTab) {
            setTimeout(function () { return _this.select(_this.tabs.first); });
        }
    };
    NglTabs.prototype.select = function (tab) {
        this.selectedChange.emit(tab);
    };
    NglTabs.prototype.move = function (evt, moves) {
        evt.preventDefault();
        var tabs = this.tabs.toArray();
        var selectedIndex = tabs.indexOf(this.activeTab);
        this.select(tabs[(tabs.length + selectedIndex + moves) % tabs.length]);
    };
    NglTabs.prototype.tabClass = function (tab) {
        return "slds-tabs_" + this.variant + "__content slds-" + (tab.active ? 'show' : 'hide');
    };
    NglTabs.prototype.trackByTab = function (index, tab) {
        return tab.uid;
    };
    NglTabs.prototype.activate = function () {
        if (this.activeTab) {
            this.activeTab.active = false;
        }
        this.activeTab = this.findTab();
        if (this.activeTab) {
            this.activeTab.active = true;
        }
    };
    NglTabs.prototype.findTab = function (value) {
        if (value === void 0) { value = this.selected; }
        if (value instanceof NglTab) {
            return value;
        }
        if (isInt(value)) {
            return this.tabs.toArray()[+value];
        }
        return this.tabs.toArray().find(function (t) {
            return t.id && t.id === value;
        });
    };
    NglTabs.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NglTabs.prototype, "variant", null);
    __decorate([
        ContentChildren(NglTab),
        __metadata("design:type", QueryList)
    ], NglTabs.prototype, "tabs", void 0);
    __decorate([
        Input('selected'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NglTabs.prototype, "setSelected", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglTabs.prototype, "selectedChange", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglTabs.prototype, "lazy", void 0);
    NglTabs = __decorate([
        Component({
            selector: 'ngl-tabset',
            template: "\n<ul [ngClass]=\"'slds-tabs_' + variant + '__nav'\" role=\"tablist\" (keydown.ArrowLeft)=\"move($event, -1)\" (keydown.ArrowRight)=\"move($event, 1)\">\n  <li *ngFor=\"let tab of tabs; trackBy: trackByTab\" [ngClass]=\"'slds-tabs_' + variant + '__item'\" [class.slds-is-active]=\"tab.active\" [id]=\"tab.uid + '__item'\" [attr.aria-controls]=\"tab.uid\" (click)=\"select(tab)\" role=\"presentation\"><a [nglInternalOutlet]=\"tab.label\" [ngClass]=\"'slds-tabs_' + variant + '__link'\" role=\"tab\" [attr.aria-selected]=\"tab.active\" [attr.tabindex]=\"tab.active ? 0 : -1\"></a></li>\n</ul>\n<div *ngFor=\"let tab of tabs; trackBy: trackByTab\" [id]=\"tab.uid\" [attr.aria-labelledby]=\"tab.uid + '__item'\" [ngClass]=\"tabClass(tab)\" role=\"tabpanel\">\n  <ng-container *ngIf=\"!lazy || tab.active\">\n    <ng-template [ngTemplateOutlet]=\"tab?.templateRef\"></ng-template>\n  </ng-container>\n</div>"
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglTabs);
    return NglTabs;
}());
export { NglTabs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi90YWJzL3RhYnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVJLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNL0M7SUFtQ0UsaUJBQW9CLE9BQW1CLEVBQVUsUUFBbUI7UUFBaEQsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFUMUQsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRXREOztXQUVHO1FBQ3NCLFNBQUksR0FBRyxJQUFJLENBQUM7UUFLbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsZUFBYSxJQUFJLENBQUMsT0FBUyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQW5DUSxzQkFBSSw0QkFBTzthQU1wQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUM7UUFDcEMsQ0FBQzthQVJRLFVBQVksT0FBNkI7WUFDaEQsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLGVBQWEsSUFBSSxDQUFDLE9BQVMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1lBQ3hCLElBQUks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cEQ0QixVQUFVO2dCQUFvQixTQUFTOztJQWpDM0Q7UUFBUixLQUFLLEVBQUU7OzswQ0FLUDtJQUt3QjtRQUF4QixlQUFlLENBQUMsTUFBTSxDQUFDO2tDQUFPLFNBQVM7eUNBQVM7SUFJOUI7UUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7OzhDQVFqQjtJQUVTO1FBQVQsTUFBTSxFQUFFOzttREFBNkM7SUFLN0I7UUFBeEIsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFOzt5Q0FBYTtJQS9CMUIsT0FBTztRQUpuQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsWUFBWTtZQUN0QixtNUJBQTBCO1NBQzNCLENBQUM7eUNBb0M2QixVQUFVLEVBQW9CLFNBQVM7T0FuQ3pELE9BQU8sQ0F3Rm5CO0lBQUQsY0FBQztDQUFBLEFBeEZELElBd0ZDO1NBeEZZLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBRdWVyeUxpc3QsIENvbnRlbnRDaGlsZHJlbiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNJbnQgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgTmdsVGFiIH0gZnJvbSAnLi90YWInO1xuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vdXRpbC9jb252ZXJ0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmdsLXRhYnNldCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90YWJzLmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xUYWJzIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgQElucHV0KCkgc2V0IHZhcmlhbnQodmFyaWFudDogJ2RlZmF1bHQnIHwgJ3Njb3BlZCcpIHtcbiAgICBjb25zdCBlbCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoZWwsIGBzbGRzLXRhYnNfJHt0aGlzLnZhcmlhbnR9YCk7XG4gICAgdGhpcy5fdmFyaWFudCA9IHZhcmlhbnQ7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhlbCwgYHNsZHMtdGFic18ke3RoaXMudmFyaWFudH1gKTtcbiAgfVxuICBnZXQgdmFyaWFudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFyaWFudCB8fCAnZGVmYXVsdCc7XG4gIH1cblxuICBAQ29udGVudENoaWxkcmVuKE5nbFRhYikgdGFiczogUXVlcnlMaXN0PE5nbFRhYj47XG5cbiAgYWN0aXZlVGFiOiBOZ2xUYWI7XG4gIHNlbGVjdGVkOiBzdHJpbmcgfCBudW1iZXIgfCBOZ2xUYWI7XG4gIEBJbnB1dCgnc2VsZWN0ZWQnKSBzZXQgc2V0U2VsZWN0ZWQoc2VsZWN0ZWQ6IHN0cmluZyB8IG51bWJlciB8IE5nbFRhYikge1xuICAgIGlmIChzZWxlY3RlZCA9PT0gdGhpcy5zZWxlY3RlZCkgeyByZXR1cm47IH1cblxuICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcblxuICAgIGlmICghdGhpcy50YWJzKSB7IHJldHVybjsgfSAvLyBXYWl0IGZvciBjb250ZW50IHRvIGluaXRpYWxpemVcblxuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSBzZWxlY3RlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8TmdsVGFiPigpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZXJ5IHRhYidzIGNvbnRlbnQgaXMgaW5zdGFudGlhdGVkIHdoZW4gdmlzaWJsZSwgYW5kIGRlc3Ryb3llZCB3aGVuIGhpZGRlbi5cbiAgICovXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBsYXp5ID0gdHJ1ZTtcblxuICBwcml2YXRlIF92YXJpYW50OiAnZGVmYXVsdCcgfCAnc2NvcGVkJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIGBzbGRzLXRhYnNfJHt0aGlzLnZhcmlhbnR9YCk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgLy8gSW5pdGlhbCBzZWxlY3Rpb24gYWZ0ZXIgYWxsIHRhYnMgYXJlIGNyZWF0ZWRcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgaWYgKCF0aGlzLmFjdGl2ZVRhYikge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlbGVjdCh0aGlzLnRhYnMuZmlyc3QpKTtcbiAgICB9XG4gIH1cblxuICBzZWxlY3QodGFiOiBOZ2xUYWIpIHtcbiAgICB0aGlzLnNlbGVjdGVkQ2hhbmdlLmVtaXQodGFiKTtcbiAgfVxuXG4gIG1vdmUoZXZ0OiBFdmVudCwgbW92ZXM6IG51bWJlcikge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgdGFicyA9IHRoaXMudGFicy50b0FycmF5KCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IHRhYnMuaW5kZXhPZiggdGhpcy5hY3RpdmVUYWIgKTtcbiAgICB0aGlzLnNlbGVjdCggdGFic1sodGFicy5sZW5ndGggKyBzZWxlY3RlZEluZGV4ICsgbW92ZXMpICUgdGFicy5sZW5ndGhdICk7XG4gIH1cblxuICB0YWJDbGFzcyh0YWI6IE5nbFRhYikge1xuICAgIHJldHVybiBgc2xkcy10YWJzXyR7dGhpcy52YXJpYW50fV9fY29udGVudCBzbGRzLSR7dGFiLmFjdGl2ZSA/ICdzaG93JyA6ICdoaWRlJ31gO1xuICB9XG5cbiAgdHJhY2tCeVRhYihpbmRleCwgdGFiOiBOZ2xUYWIpIHtcbiAgICByZXR1cm4gdGFiLnVpZDtcbiAgfVxuXG4gIHByaXZhdGUgYWN0aXZhdGUoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlVGFiKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhYi5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmVUYWIgPSB0aGlzLmZpbmRUYWIoKTtcbiAgICBpZiAodGhpcy5hY3RpdmVUYWIpIHtcbiAgICAgIHRoaXMuYWN0aXZlVGFiLmFjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaW5kVGFiKHZhbHVlOiBhbnkgPSB0aGlzLnNlbGVjdGVkKTogTmdsVGFiIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBOZ2xUYWIpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzSW50KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRoaXMudGFicy50b0FycmF5KClbK3ZhbHVlXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGFicy50b0FycmF5KCkuZmluZCgodDogTmdsVGFiKSA9PiB7XG4gICAgICByZXR1cm4gdC5pZCAmJiB0LmlkID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxuIl19