import { __decorate, __metadata } from "tslib";
import { Component, Input, QueryList, ContentChildren, Output, EventEmitter, ElementRef, Renderer2, AfterContentInit } from '@angular/core';
import { isInt } from '../util/util';
import { NglTab } from './tab';
import { InputBoolean } from '../util/convert';
let NglTabs = class NglTabs {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.selectedChange = new EventEmitter();
        /**
         * Whether every tab's content is instantiated when visible, and destroyed when hidden.
         */
        this.lazy = true;
        this.renderer.addClass(this.element.nativeElement, `slds-tabs_${this.variant}`);
    }
    set variant(variant) {
        const el = this.element.nativeElement;
        this.renderer.removeClass(el, `slds-tabs_${this.variant}`);
        this._variant = variant;
        this.renderer.addClass(el, `slds-tabs_${this.variant}`);
    }
    get variant() {
        return this._variant || 'default';
    }
    set setSelected(selected) {
        if (selected === this.selected) {
            return;
        }
        this.selected = selected;
        if (!this.tabs) {
            return;
        } // Wait for content to initialize
        this.activate();
    }
    ngAfterContentInit() {
        // Initial selection after all tabs are created
        this.activate();
        if (!this.activeTab) {
            setTimeout(() => this.select(this.tabs.first));
        }
    }
    select(tab) {
        this.selectedChange.emit(tab);
    }
    move(evt, moves) {
        evt.preventDefault();
        const tabs = this.tabs.toArray();
        const selectedIndex = tabs.indexOf(this.activeTab);
        this.select(tabs[(tabs.length + selectedIndex + moves) % tabs.length]);
    }
    tabClass(tab) {
        return `slds-tabs_${this.variant}__content slds-${tab.active ? 'show' : 'hide'}`;
    }
    trackByTab(index, tab) {
        return tab.uid;
    }
    activate() {
        if (this.activeTab) {
            this.activeTab.active = false;
        }
        this.activeTab = this.findTab();
        if (this.activeTab) {
            this.activeTab.active = true;
        }
    }
    findTab(value = this.selected) {
        if (value instanceof NglTab) {
            return value;
        }
        if (isInt(value)) {
            return this.tabs.toArray()[+value];
        }
        return this.tabs.toArray().find((t) => {
            return t.id && t.id === value;
        });
    }
};
NglTabs.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], NglTabs.prototype, "variant", null);
__decorate([
    ContentChildren(NglTab),
    __metadata("design:type", QueryList)
], NglTabs.prototype, "tabs", void 0);
__decorate([
    Input('selected'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], NglTabs.prototype, "setSelected", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglTabs.prototype, "selectedChange", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglTabs.prototype, "lazy", void 0);
NglTabs = __decorate([
    Component({
        selector: 'ngl-tabset',
        template: "\n<ul [ngClass]=\"'slds-tabs_' + variant + '__nav'\" role=\"tablist\" (keydown.ArrowLeft)=\"move($event, -1)\" (keydown.ArrowRight)=\"move($event, 1)\">\n  <li *ngFor=\"let tab of tabs; trackBy: trackByTab\" [ngClass]=\"'slds-tabs_' + variant + '__item'\" [class.slds-is-active]=\"tab.active\" [id]=\"tab.uid + '__item'\" [attr.aria-controls]=\"tab.uid\" (click)=\"select(tab)\" role=\"presentation\"><a [nglInternalOutlet]=\"tab.label\" [ngClass]=\"'slds-tabs_' + variant + '__link'\" role=\"tab\" [attr.aria-selected]=\"tab.active\" [attr.tabindex]=\"tab.active ? 0 : -1\"></a></li>\n</ul>\n<div *ngFor=\"let tab of tabs; trackBy: trackByTab\" [id]=\"tab.uid\" [attr.aria-labelledby]=\"tab.uid + '__item'\" [ngClass]=\"tabClass(tab)\" role=\"tabpanel\">\n  <ng-container *ngIf=\"!lazy || tab.active\">\n    <ng-template [ngTemplateOutlet]=\"tab?.templateRef\"></ng-template>\n  </ng-container>\n</div>"
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], NglTabs);
export { NglTabs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi90YWJzL3RhYnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVJLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNL0MsSUFBYSxPQUFPLEdBQXBCLE1BQWEsT0FBTztJQW1DbEIsWUFBb0IsT0FBbUIsRUFBVSxRQUFtQjtRQUFoRCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVQxRCxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFdEQ7O1dBRUc7UUFDc0IsU0FBSSxHQUFHLElBQUksQ0FBQztRQUtuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxhQUFhLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFuQ1EsSUFBSSxPQUFPLENBQUMsT0FBNkI7UUFDaEQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLGFBQWEsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFB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c0NBS1A7QUFLd0I7SUFBeEIsZUFBZSxDQUFDLE1BQU0sQ0FBQzs4QkFBTyxTQUFTO3FDQUFTO0FBSTlCO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7OzswQ0FRakI7QUFFUztJQUFULE1BQU0sRUFBRTs7K0NBQTZDO0FBSzdCO0lBQXhCLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRTs7cUNBQWE7QUEvQjFCLE9BQU87SUFKbkIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFlBQVk7UUFDdEIsbTVCQUEwQjtLQUMzQixDQUFDO3FDQW9DNkIsVUFBVSxFQUFvQixTQUFTO0dBbkN6RCxPQUFPLENBd0ZuQjtTQXhGWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgUXVlcnlMaXN0LCBDb250ZW50Q2hpbGRyZW4sIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzSW50IH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE5nbFRhYiB9IGZyb20gJy4vdGFiJztcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uL3V0aWwvY29udmVydCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC10YWJzZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFicy5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTmdsVGFicyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXG4gIEBJbnB1dCgpIHNldCB2YXJpYW50KHZhcmlhbnQ6ICdkZWZhdWx0JyB8ICdzY29wZWQnKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKGVsLCBgc2xkcy10YWJzXyR7dGhpcy52YXJpYW50fWApO1xuICAgIHRoaXMuX3ZhcmlhbnQgPSB2YXJpYW50O1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoZWwsIGBzbGRzLXRhYnNfJHt0aGlzLnZhcmlhbnR9YCk7XG4gIH1cbiAgZ2V0IHZhcmlhbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhcmlhbnQgfHwgJ2RlZmF1bHQnO1xuICB9XG5cbiAgQENvbnRlbnRDaGlsZHJlbihOZ2xUYWIpIHRhYnM6IFF1ZXJ5TGlzdDxOZ2xUYWI+O1xuXG4gIGFjdGl2ZVRhYjogTmdsVGFiO1xuICBzZWxlY3RlZDogc3RyaW5nIHwgbnVtYmVyIHwgTmdsVGFiO1xuICBASW5wdXQoJ3NlbGVjdGVkJykgc2V0IHNldFNlbGVjdGVkKHNlbGVjdGVkOiBzdHJpbmcgfCBudW1iZXIgfCBOZ2xUYWIpIHtcbiAgICBpZiAoc2VsZWN0ZWQgPT09IHRoaXMuc2VsZWN0ZWQpIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG5cbiAgICBpZiAoIXRoaXMudGFicykgeyByZXR1cm47IH0gLy8gV2FpdCBmb3IgY29udGVudCB0byBpbml0aWFsaXplXG5cbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH1cblxuICBAT3V0cHV0KCkgc2VsZWN0ZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE5nbFRhYj4oKTtcblxuICAvKipcbiAgICogV2hldGhlciBldmVyeSB0YWIncyBjb250ZW50IGlzIGluc3RhbnRpYXRlZCB3aGVuIHZpc2libGUsIGFuZCBkZXN0cm95ZWQgd2hlbiBoaWRkZW4uXG4gICAqL1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbGF6eSA9IHRydWU7XG5cbiAgcHJpdmF0ZSBfdmFyaWFudDogJ2RlZmF1bHQnIHwgJ3Njb3BlZCc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCBgc2xkcy10YWJzXyR7dGhpcy52YXJpYW50fWApO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8vIEluaXRpYWwgc2VsZWN0aW9uIGFmdGVyIGFsbCB0YWJzIGFyZSBjcmVhdGVkXG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIGlmICghdGhpcy5hY3RpdmVUYWIpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZWxlY3QodGhpcy50YWJzLmZpcnN0KSk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0KHRhYjogTmdsVGFiKSB7XG4gICAgdGhpcy5zZWxlY3RlZENoYW5nZS5lbWl0KHRhYik7XG4gIH1cblxuICBtb3ZlKGV2dDogRXZlbnQsIG1vdmVzOiBudW1iZXIpIHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IHRhYnMgPSB0aGlzLnRhYnMudG9BcnJheSgpO1xuICAgIGNvbnN0IHNlbGVjdGVkSW5kZXggPSB0YWJzLmluZGV4T2YoIHRoaXMuYWN0aXZlVGFiICk7XG4gICAgdGhpcy5zZWxlY3QoIHRhYnNbKHRhYnMubGVuZ3RoICsgc2VsZWN0ZWRJbmRleCArIG1vdmVzKSAlIHRhYnMubGVuZ3RoXSApO1xuICB9XG5cbiAgdGFiQ2xhc3ModGFiOiBOZ2xUYWIpIHtcbiAgICByZXR1cm4gYHNsZHMtdGFic18ke3RoaXMudmFyaWFudH1fX2NvbnRlbnQgc2xkcy0ke3RhYi5hY3RpdmUgPyAnc2hvdycgOiAnaGlkZSd9YDtcbiAgfVxuXG4gIHRyYWNrQnlUYWIoaW5kZXgsIHRhYjogTmdsVGFiKSB7XG4gICAgcmV0dXJuIHRhYi51aWQ7XG4gIH1cblxuICBwcml2YXRlIGFjdGl2YXRlKCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZVRhYikge1xuICAgICAgdGhpcy5hY3RpdmVUYWIuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlVGFiID0gdGhpcy5maW5kVGFiKCk7XG4gICAgaWYgKHRoaXMuYWN0aXZlVGFiKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhYi5hY3RpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZmluZFRhYih2YWx1ZTogYW55ID0gdGhpcy5zZWxlY3RlZCk6IE5nbFRhYiB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTmdsVGFiKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChpc0ludCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnRhYnMudG9BcnJheSgpWyt2YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRhYnMudG9BcnJheSgpLmZpbmQoKHQ6IE5nbFRhYikgPT4ge1xuICAgICAgcmV0dXJuIHQuaWQgJiYgdC5pZCA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==