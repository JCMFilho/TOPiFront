import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, Renderer2, ContentChildren, QueryList } from '@angular/core';
import { NglAccordionSection } from './accordion-section';
import { isOptionSelected, addOptionToSelection } from '../util/util';
import { InputBoolean } from '../util/convert';
let NglAccordion = class NglAccordion {
    constructor(element, renderer) {
        this.activeNameChange = new EventEmitter();
        /**
         * Whether we allow multiple sections open at a time.
         */
        this.multiple = false;
        renderer.addClass(element.nativeElement, 'slds-accordion');
    }
    toggle(section) {
        const active = addOptionToSelection(section.name, this.activeName, this.multiple, true);
        this.activeNameChange.emit(active);
    }
    isActive(section) {
        return isOptionSelected(section.name, this.activeName, this.multiple);
    }
};
NglAccordion.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglAccordion.prototype, "activeName", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglAccordion.prototype, "activeNameChange", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglAccordion.prototype, "multiple", void 0);
__decorate([
    ContentChildren(NglAccordionSection),
    __metadata("design:type", QueryList)
], NglAccordion.prototype, "sections", void 0);
NglAccordion = __decorate([
    Component({
        selector: 'ngl-accordion,[ngl-accordion]',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: "\n<li *ngFor=\"let section of sections\" nglAccordionItem [isActive]=\"isActive(section)\" [section]=\"section\" (toggle)=\"toggle(section)\"></li>"
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], NglAccordion);
export { NglAccordion };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2FjY29yZGlvbi9hY2NvcmRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25KLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPL0MsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtJQWdCdkIsWUFBWSxPQUFtQixFQUFFLFFBQW1CO1FBVDFDLHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFxQixDQUFDO1FBRW5FOztXQUVHO1FBQ3NCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFLeEMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUE0QjtRQUNqQyxNQUFNLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRLENBQUMsT0FBNEI7UUFDbkMsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Q0FFRixDQUFBOztZQWJzQixVQUFVO1lBQVksU0FBUzs7QUFYM0M7SUFBUixLQUFLLEVBQUU7O2dEQUErQjtBQUU3QjtJQUFULE1BQU0sRUFBRTs7c0RBQTBEO0FBSzFDO0lBQXhCLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRTs7OENBQWtCO0FBRUo7SUFBckMsZUFBZSxDQUFDLG1CQUFtQixDQUFDOzhCQUFXLFNBQVM7OENBQXNCO0FBZHBFLFlBQVk7SUFMeEIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLCtCQUErQjtRQUN6QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtRQUMvQywrSkFBK0I7S0FDaEMsQ0FBQztxQ0FpQnFCLFVBQVUsRUFBWSxTQUFTO0dBaEJ6QyxZQUFZLENBNkJ4QjtTQTdCWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2xBY2NvcmRpb25TZWN0aW9uIH0gZnJvbSAnLi9hY2NvcmRpb24tc2VjdGlvbic7XG5pbXBvcnQgeyBpc09wdGlvblNlbGVjdGVkLCBhZGRPcHRpb25Ub1NlbGVjdGlvbiB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi91dGlsL2NvbnZlcnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtYWNjb3JkaW9uLFtuZ2wtYWNjb3JkaW9uXScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZVVybDogJy4vYWNjb3JkaW9uLmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xBY2NvcmRpb24ge1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBleHBhbmRlZCBzZWN0aW9uKHMpLlxuICAgKi9cbiAgQElucHV0KCkgYWN0aXZlTmFtZTogc3RyaW5nIHwgc3RyaW5nW107XG5cbiAgQE91dHB1dCgpIGFjdGl2ZU5hbWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IHN0cmluZ1tdPigpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHdlIGFsbG93IG11bHRpcGxlIHNlY3Rpb25zIG9wZW4gYXQgYSB0aW1lLlxuICAgKi9cbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG11bHRpcGxlID0gZmFsc2U7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihOZ2xBY2NvcmRpb25TZWN0aW9uKSBzZWN0aW9uczogUXVlcnlMaXN0PE5nbEFjY29yZGlvblNlY3Rpb24+O1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICByZW5kZXJlci5hZGRDbGFzcyhlbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzbGRzLWFjY29yZGlvbicpO1xuICB9XG5cbiAgdG9nZ2xlKHNlY3Rpb246IE5nbEFjY29yZGlvblNlY3Rpb24pIHtcbiAgICBjb25zdCBhY3RpdmUgPSBhZGRPcHRpb25Ub1NlbGVjdGlvbihzZWN0aW9uLm5hbWUsIHRoaXMuYWN0aXZlTmFtZSwgdGhpcy5tdWx0aXBsZSwgdHJ1ZSk7XG4gICAgdGhpcy5hY3RpdmVOYW1lQ2hhbmdlLmVtaXQoYWN0aXZlKTtcbiAgfVxuXG4gIGlzQWN0aXZlKHNlY3Rpb246IE5nbEFjY29yZGlvblNlY3Rpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNPcHRpb25TZWxlY3RlZChzZWN0aW9uLm5hbWUsIHRoaXMuYWN0aXZlTmFtZSwgdGhpcy5tdWx0aXBsZSk7XG4gIH1cblxufVxuIl19